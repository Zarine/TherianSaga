<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>

<head>
  <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
  <title>TS super data displayer</title>
</head>

<body>
  <div id="Main" class="main">
    <div id="LanguageSelection" class="languageSelection">
      <div id="EN" class="language english selected" onclick="setLanguage(this)">English</div>
      <div id="FR" class="language french" onclick="setLanguage(this)">French</div>
    </div>
    <div id="InputFileArea" class="inputFileArea">
      <input type="file" id="files" name="files[]" multiple />
    </div>
    <div id="OperationSelection" class="operationSelection">
      <div id="Dump" class="operation dump" onclick="displayOutput(this)">Dump</div>
      <div id="Explore" class="operation explore" onclick="displayOutput(this)">Explore</div>
    </div>
    <div id="Output" class="allOutput">
      <div id="DumpOutput" class="output hidden">
        <div id="SelectorDumpOutput" class="Selector">
          <select id="SelectorDumpOutputComboBox" onchange="displayDump(this)">
            <option disabled selected value="">Please Select...</option>
            <option value="dumpItemBaseSkillData">Item Base Skill Data</option>
            <option value="dumpItemTypeData">Item Type Data</option>
            <option value="dumpSkillData">Skill Data</option>
            <option value="dumpTaskGroupData">Task Group Data</option>
          </select>
        </div>
        <div id="DumpOutputResult" class="outputText"></div>
      </div>
      <div id="ExploreOutput" class="output hidden">
        <div id="ExploreOutputResult" class="outputExplore"></div>
      </div>
    </div>
    <div id="Test" class="exploreItem" objectId="3a1c9e5f-b4b6-e211-be8c-782bcb902040" onclick="exploreDisplaySkill(this)">Helper For Test</div>
  </div>

  <script type="text/javascript">
    var _ItemBaseSkillData = {};
    var _DungeonData = {};
    var _ItemTypeData = {};
    var _ItemBaseData = {};
    var _SiteData = {};
    var _SkillData = {};
    var _TaskGroupData = {};
    var _TaskData = {};
    var _RecipeData = {};
    var _RecipeIngredientData = {};
    var _UnitTypeData = {};
    var _UnitBaseData = {};
    var _ImageData = {};
    var _TerritoryData = {};
    var _RegionData = {};
    var _AreaWildlifeData = {};
    var _AreaResourceData = {};
    var _LandformData = {};
    var _UnitBaseSkillData = {};
    var _StoreData = {};
    var _ResidentData = {};
    var _ZoneData = {};

    var _Language = 'EN';
    var _CurrentOutput = '';

    function handleFileSelect(evt) {
      var files = evt.target.files; // FileList object

      // files is a FileList of File objects. List some properties.
      var output = [];

      var file = files[0];
      var reader = new FileReader();

      // Closure to capture the file information.
      reader.onload = (function(theFile) {
        return function(e) {
          ParseFile(e.target.result)
        };
        
      })(file);

      reader.readAsText(file);
    }

    document.getElementById('files').addEventListener('change', handleFileSelect, false);

    function ParseFile(file) {
      resetData();

      var parser = new DOMParser();
      var xmlDoc = parser.parseFromString(file, "text/xml");

      var context = xmlDoc.getElementsByTagName("context")[0];
        extractItemBaseSkillSet(context)
  extractDungeonSet(context)
  extractItemBaseSet(context)
  extractItemTypeSet(context)
  extractSiteSet(context)
  extractSkillSet(context)
  extractTaskGroupSet(context)
  extractTaskSet(context)
  extractRecipeSet(context)
  extractImageSet(context)
  
  removeOperationSelection();
  hideAllOutput();
}
    function extractItemBaseSkillSet(context) {
      var itemBaseSkillSet = context.getElementsByTagName("itemBaseSkillSet")[0];
      var numberOfItem = itemBaseSkillSet.getAttribute("count");
      for (var i = 0; i < numberOfItem; i++) {
        var itemBaseSkillElement = itemBaseSkillSet.getElementsByTagName("itemBaseSkill")[i];

        var itemBaseSkill = {};

        extractFromAttributeWithDefault(itemBaseSkillElement, itemBaseSkill, "value", 0);

        itemBaseSkill['skillId'] = itemBaseSkillElement.getAttribute("skillId");
        itemBaseSkill['itemBaseId'] = itemBaseSkillElement.getAttribute("itemBaseId");
        itemBaseSkill['isProxy'] = itemBaseSkillElement.getAttribute("isProxy");

        _ItemBaseSkillData[itemBaseSkillElement.getAttribute("id")] = itemBaseSkill;
      }
    }

    function extractDungeonSet(context) {
      var dungeonSet = context.getElementsByTagName("dungeonSet")[0];
      var numberOfItem = dungeonSet.getAttribute("count");
      for (var i = 0; i < numberOfItem; i++) {
        var dungeonElement = dungeonSet.getElementsByTagName("dungeon")[i]

        var dungeon = {};

        dungeon['mapName'] = dungeonElement.getAttribute("mapName");
        extractList(dungeonElement, dungeon, "unitBases");
        extractLocalizedText(dungeonElement, dungeon, "description");
        extractName(dungeonElement, dungeon);

        _DungeonData[dungeonElement.getAttribute("id")] = dungeon;
      }
    }

    function extractItemTypeSet(context) {
      var itemTypeSet = context.getElementsByTagName("itemTypeSet")[0];
      var numberOfItem = itemTypeSet.getAttribute("count");
      for (var i = 0; i < numberOfItem; i++) {
        var itemTypeElement = itemTypeSet.getElementsByTagName("itemType")[i];
        var itemType = {};

        extractName(itemTypeElement, itemType);

        extractFromAttributeWithDefault(itemTypeElement, itemType, "parentItemTypeId", 0);
        extractFromAttributeWithDefault(itemTypeElement, itemType, "iconId", 0);
        extractFromAttributeWithDefault(itemTypeElement, itemType, "showInGuide", 0);

        itemType['totalItemBaseCount'] = itemTypeElement.getAttribute("totalItemBaseCount");

        extractList(itemTypeElement, itemType, "skills");
        extractList(itemTypeElement, itemType, "itemBases");
        extractList(itemTypeElement, itemType, "usedInRecipeIngredients");
        extractList(itemTypeElement, itemType, "usedInRecipes");
        extractList(itemTypeElement, itemType, "subItemTypes");

        _ItemTypeData[itemTypeElement.getAttribute("id")] = itemType;
      }
    }

    function extractSiteSet(context) {
      var siteSet = context.getElementsByTagName("siteSet")[0]
      var numberOfItem = siteSet.getAttribute("count")
      for (var i = 0; i < numberOfItem; i++) {
        var siteElement = siteSet.getElementsByTagName("site")[i]

        var site = {}
        site['signId'] = siteElement.getAttribute("signId");
        site['signIconId'] = siteElement.getAttribute("signIconId");
        extractList(siteElement, site, "zones");
        extractList(siteElement, site, "residents");
        extractName(siteElement, site)

        _SiteData[siteElement.getAttribute("id")] = site
      }
    }

    function extractItemBaseSet(context) {
      var itemBaseSet = context.getElementsByTagName("itemBaseSet")[0];
      var numberOfItem = itemBaseSet.getAttribute("count");
      for (var i = 0; i < numberOfItem; i++) {
        var itemBaseElement = itemBaseSet.getElementsByTagName("itemBase")[i];

        var itemBase = {};

        extractName(itemBaseElement, itemBase)

        _ItemBaseData[itemBaseElement.getAttribute("id")] = itemBase;
      }
    }

    function extractSkillSet(context) {
      var skillSet = context.getElementsByTagName("skillSet")[0];
      var numberOfItem = skillSet.getAttribute("count");
      for (var i = 0; i < numberOfItem; i++) {
        var skillElement = skillSet.getElementsByTagName("skill")[i];
        var skill = {};

        extractName(skillElement, skill);

        extractFromAttributeWithDefault(skillElement, skill, "sequenceOrder", 0);
        extractFromAttributeWithDefault(skillElement, skill, "iconId", 0);

        extractList(skillElement, skill, "usedByItemTypes");
        extractList(skillElement, skill, "usedByUnitBaseSkills");
        extractList(skillElement, skill, "usedByItemBaseSkills");
        extractList(skillElement, skill, "taskGroups");
        extractList(skillElement, skill, "subSkills");

        _SkillData[skillElement.getAttribute("id")] = skill;
      }
    }

    function extractTaskGroupSet(context) {
      var taskGroupSet = context.getElementsByTagName("taskGroupSet")[0]
      var numberOfItem = taskGroupSet.getAttribute("count")
      for (var i = 0; i < numberOfItem; i++) {
        var taskGroupElement = taskGroupSet.getElementsByTagName("taskGroup")[i]

        var taskGroup = {}
        taskGroup['iconId'] = taskGroupElement.getAttribute("iconId");
		extractFromAttributeWithDefault(taskGroupElement, taskGroup, "sequenceOrder", 0)
		extractList(taskGroupElement, taskGroup, "tasks");
		extractName(taskGroupElement, taskGroup)

        _TaskGroupData[taskGroupElement.getAttribute("id")] = taskGroup
      }
    }
    
    
    function extractTaskSet(context) {
    var taskSet = context.getElementsByTagName("taskSet")[0]
    var numberOfItem = taskSet.getAttribute("count")
    for (var i = 0; i < numberOfItem; i++) {
        var taskElement = taskSet.getElementsByTagName("task")[i]

        var task = {}

        task['duration'] = taskElement.getAttribute("duration")
        task['skillId'] = taskElement.getAttribute("skillId")
		extractFromAttributeWithDefault(taskElement, task, "recipeId", 0)
		extractFromAttributeWithDefault(taskElement, task, "producedItemBase", 0)
		extractFromAttributeWithDefault(taskElement, task, "effort", 0)
		extractFromAttributeWithDefault(taskElement, task, "producedIUnitBase", 0)
		extractFromAttributeWithDefault(taskElement, task, "difficulty", 0)
		extractFromAttributeWithDefault(taskElement, task, "cooldown", 0)
		extractName(taskElement, task)

        _TaskData[taskElement.getAttribute("id")] = task
    }
}

function extractRecipeSet(context) {
    var recipeSet = context.getElementsByTagName("recipeSet")[0]
    var numberOfItem = recipeSet.getAttribute("count")
    for (var i = 0; i < numberOfItem; i++) {
        var recipeElement = recipeSet.getElementsByTagName("recipe")[i]

        var recipe = {}
        
		extractFromAttributeWithDefault(recipeElement, recipe, "representedByItemBaseId", 0)
		extractFromAttributeWithDefault(recipeElement, recipe, "producedItemBaseId", 0)
		extractFromAttributeWithDefault(recipeElement, recipe, "isDiscoverable", 0)
        extractList(recipeElement, recipe, "useInTasks")
        extractList(recipeElement, recipe, "ingredients")
		extractName(recipeElement, recipe)
        
        if (recipe['producedItemBaseId'] == 0)
        {
           console.log("Missing producedItemBaseId for: " + recipe['nameEN'])
        }
    }
}
        
function extractImageSet(context) {
    var imageSet = context.getElementsByTagName("imageSet")[0];
    var numberOfItem = imageSet.getAttribute("count");
    for (var i = 0; i < numberOfItem; i++) {
	  var imageElement = imageSet.getElementsByTagName("image")[i];
	  
	  var image = {};
	  image['path'] = imageElement.getAttribute("path");
	  
	  _ImageData[imageElement.getAttribute("id")] = image;
	}
}

function extractFromAttributeWithDefault(baseElement, mapItem, name, def) {
  var attribut = baseElement.getAttribute(name);
  if(attribut == null) { attribut = def; }
  mapItem[name] = attribut;
}

function extractName(baseElement, mapItem) {
    return extractLocalizedText(baseElement, mapItem, "name");
}

function extractLocalizedText(baseElement, mapItem, tagname) {
    var element = baseElement.getElementsByTagName(tagname)[0];
    var keyEN = tagname + "EN";
    var keyFR = tagname + "FR";
    mapItem[keyFR] = element.getElementsByTagName("text")[0].childNodes[0].nodeValue;
    if (element.getElementsByTagName("text").length == 1) {
        mapItem[keyEN] = element.getElementsByTagName("text")[0].childNodes[0].nodeValue;
        console.log("Missing English " + tagname + " for: " + mapItem[keyEN]);
      } else {
        mapItem[keyEN] = element.getElementsByTagName("text")[1].childNodes[0].nodeValue;
      }
      return mapItem;
    }

    function extractList(source, mapItem, name) {
      var element = source.getElementsByTagName(name)[0];
      var count = element.getAttribute("count");
      mapItem[name] = [];
      for (var i = 0; i < count; i++) {
        mapItem[name][mapItem[name].length] = element.getElementsByTagName("link")[i].getAttribute("id");
      }
    }

    function resetData() {
      _ItemBaseSkillData = {};
      _DungeonData = {};
      _ItemTypeData = {};
      _ItemBaseData = {};
      _SiteData = {};
      _SkillData = {};
      _TaskGroupData = {};
      _TaskData = {};
      _RecipeData = {};
      _RecipeIngredientData = {};
      _UnitTypeData = {};
      _UnitBaseData = {};
      _ImageData = {};
      _TerritoryData = {};
      _RegionData = {};
      _AreaWildlifeData = {};
      _AreaResourceData = {};
      _LandformData = {};
      _UnitBaseSkillData = {};
      _StoreData = {};
      _ResidentData = {};
      _ZoneData = {};
    }

     ////////////////
     // Dump display
     ////////////////

    function displayDump(selector) {
      var selectedValue = selector.options[selector.selectedIndex].value
      if (selectedValue != "") {
        eval(selectedValue)();
      }
    }

    function dumpItemBaseSkillData() {
      var result = "";
      for (var itemBaseSkillId in _ItemBaseSkillData) {
        var itemBaseSkill = _ItemBaseSkillData[itemBaseSkillId];
        result += '<ul>' + "id of element: &lt;" + itemBaseSkillId + "&gt; with value of: &lt;" + itemBaseSkill['value'] + "&gt; for skill: &lt;" + getSkillName(itemBaseSkill) + "&gt; on item: &lt;" + getItemBaseName(itemBaseSkill) + "&gt;" + '</ul>';
      }
      document.getElementById('DumpOutputResult').innerHTML = result;
    }

    function dumpItemTypeData() {
      var result = "";
      for (var itemTypeId in _ItemTypeData) {
        var ItemType = _ItemTypeData[itemTypeId];
        result += '<ul><img src="' + getImage(ItemType) + '" >' + "Item type: &lt;" + getLocalizedName(ItemType) + "&gt; which is child of: &lt;" + getParentItemTypeName(ItemType) + "&gt; " + '</ul>';
      }
      document.getElementById('DumpOutputResult').innerHTML = result;
    }

    function dumpSkillData() {
      var result = "";
      for (var skillId in _SkillData) {
        var skill = _SkillData[skillId];
        result += '<ul><img src="' + getImage(skill) + '" >' + "Skill: &lt;" + getLocalizedName(skill) + "&gt;" + '</ul>';
      }
      document.getElementById('DumpOutputResult').innerHTML = result;
    }

    function dumpTaskGroupData() {
      var result = "";
      for (var taskGroupId in _TaskGroupData) {
        var taskGroup = _TaskGroupData[taskGroupId];
        result += '<ul><img src="' + getImage(taskGroup) + '" >' + "Task group: &lt;" + getLocalizedName(taskGroup) + "&gt; " + '</ul>';
      }
      document.getElementById('DumpOutputResult').innerHTML = result;
    }

     //////////////////
     // Explore display
     //////////////////

    function exploreDisplaySkill(element) {
      var skillId = element.getAttribute("objectId");
      var skill = _SkillData[skillId];

      var result = '';

      // First set a Title
      result += '<img src="' + getImage(skill) + '" ><h1 class="exploreTitle title" id="Skill_' + skillId + '">' + getLocalizedName(skill) + '</h1>';

      result += exploreDisplayList(skill, 'usedByItemTypes');
      //exploreDisplayList(skill, 'usedByUnitBaseSkills');
      //exploreDisplayList(skill, 'usedByItemBaseSkills');
      //exploreDisplayList(skill, 'subSkills');
      //exploreDisplayList(skill, 'taskGroups');

      document.getElementById('ExploreOutputResult').innerHTML = result;
    }

    function exploreDisplayList(elementSource, listType) {
      var result = "";
      var listToDisplay = elementSource[listType];
      if (listToDisplay.length != 0) {
        result += titleForCategoryExplore(listType);
        for (var i = 0; i < listToDisplay.length; i++) {
          result += eval(listType + "DisplayInformation")(listToDisplay[i]);
        }
        result += '</div>';
      }
      return result;
    }

    function titleForCategoryExplore(type) {
      var result = '<div>';
      result += '<h2 class="subTitle exploreSubTitle">' + type + '</h2>';
      return result;
    }

    function usedByItemTypesDisplayInformation(id) {
      var result = "";

      var usedByItemTypes = _ItemTypeData[id];
      result += '<div class="exploreItem" onclick="exploreDisplayItemType(this)" objectId="' + id + '">'
      result += '<img src="' + getImage(usedByItemTypes) + '" >Item type: &lt;' + getLocalizedName(usedByItemTypes) + '&gt; which is child of: &lt;' + getParentItemTypeName(usedByItemTypes) + '&gt;';

      result += '</div>';
      return result;
    }

     //////////////////////
     // Helper for display
     //////////////////////

    function setLanguage(button) {
      _Language = button.id;
      removeLanguageSelection();
      addClass("selected", button);
      displayOperation();
    }

    function getLocalizedName(dataElement) {
      if (_Language == 'FR') {
        return getNameFR(dataElement)
      } else {
        return getNameEN(dataElement)
      }
    }


    function getItemBaseName(elementSource) {
      if (_Language == 'FR') {
        return getNameFR(_ItemBaseData[elementSource['itemBaseId']])
      } else {
        return getNameEN(_ItemBaseData[elementSource['itemBaseId']])
      }
    }

    function getSkillName(elementSource) {
      if (_Language == 'FR') {
        return getNameFR(_SkillData[elementSource['skillId']])
      } else {
        return getNameEN(_SkillData[elementSource['skillId']])
      }
    }

    function getItemTypeName(elementSource) {
      if (_Language == 'FR') {
        return getNameFR(_ItemTypeData[elementSource['skillId']])
      } else {
        return getNameEN(_ItemTypeData[elementSource['skillId']])
      }
    }

    function getParentItemTypeName(elementSource) {
      var parentId = elementSource['parentItemTypeId'];
      if (parentId != 0) {
        if (_Language == 'FR') {
          return getNameFR(_ItemTypeData[parentId]);
        } else {
          return getNameEN(_ItemTypeData[parentId]);
        }
      }
      if (_Language == 'FR') {
        return "Rien";
      } else {
        return "Nothing";
      }
    }

    function getImage(elmentSource) {
      var IconId = elmentSource["iconId"];
      if (IconId != 0) {
        return "http://ttsassets.blob.core.windows.net/gameassets/Images/" + _ImageData[elmentSource["iconId"]]['path'];
      }
      return "http://ttsassets.blob.core.windows.net/gameassets/Images/00600/00619.png";
    }

    function getNameEN(dataElement) {
      return dataElement['nameEN'];
    }

    function getNameFR(dataElement) {
      return dataElement['nameFR'];
    }

    function displayOutput(origin) {
      hideAllOutput();
      removeOperationSelection();
      addClass("selected", origin);
      _CurrentOutput = origin.id + 'Output';
      removeClass("hidden", document.getElementById(_CurrentOutput));

      displayOperation();
    }

    function displayOperation() {
      if (_CurrentOutput == "DumpOutput") {
        displayDump(document.getElementById("SelectorDumpOutputComboBox"));
        return;
      }
    }

    function hideAllOutput() {
      addClass("hidden", document.getElementById('DumpOutput'));
      addClass("hidden", document.getElementById('ExploreOutput'));
    }

    function removeLanguageSelection() {
      removeClass("selected", document.getElementById('EN'));
      removeClass("selected", document.getElementById('FR'));
    }

    function removeOperationSelection() {
      removeClass("selected", document.getElementById('Dump'));
      removeClass("selected", document.getElementById('Explore'));
    }

    function addClass(classname, element) {
      var cn = element.className;
      //test for existance
      if (cn.indexOf(classname) != -1) {
        return;
      }
      //add a space if the element already has class
      if (cn != '') {
        classname = ' ' + classname;
      }
      element.className = cn + classname;
    }

    function removeClass(classname, element) {
      var cn = element.className;
      var rxp = new RegExp("\\s?\\b" + classname + "\\b", "g");
      cn = cn.replace(rxp, '');
      element.className = cn;
    }
  </script>

  <style type="text/css">
    .hidden {
      display: none;
    }
    .selected {
      background-color: #00bfff;
    }
    .inputFileArea {} .operationSelection,
    .languageSelection {
      margin: 20px 0;
    }
    .Selector {
      text-align: center
    }
    .operation,
    .language {
      display: inline;
      padding: 5px;
      border: solid 2px black;
      border-radius: 10px;
      cursor: pointer;
    }
    h1 {
      display: inline;
    }
    .exploreItem {
      cursor: pointer;
    }
  </style>

</body>

</html>
